#!/usr/bin/bash
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2024; BSD License"
CEN_TITLE="Monitor for weewx2hass data, simple ASCII-art clock"

# NOTE this script contains annotations to make 'shellcheck' happy. To run
# 'shellcheck' use: centauricreate --check <file>   # see centauri-bash-lib

# declare global variables ...

CEN_OPT_ASCII=                  # see --ascii
CEN_OPT_CLOCK=                  # see --extra
CEN_OPT_HOST='localhost'        # see --host
CEN_OPT_INDENT='2,0'            # see --indent

                                # List of tag options for subscribe
DAT_MQTOPICS=('-t' 'weewx/inside' '-t' 'weewx/outside')

DAT_SERIALIZER=                 # PID of serializer sub shell
DAT_SUBSCRIBER=                 # PID of subscriber child process
DAT_MQTTPIPE=                   # pipe for MQtt Payload data
DAT_MQTTDATA=                   # serialized subscription data
DAT_UPDATED=                    # update timestamp
DAT_COUNTER=0                   # simple update counter
DAT_POLLMOD=10                  # modulo for file polling
DAT_FONT=                       # toilet font
declare -A DAT_DICTDATA         # to serialize/deserialize

# ------------------------------------------------------------------------------
# Background processes/sub-shells
# ------------------------------------------------------------------------------

# MQtt subscription starts in a sub-shell; exec replaces useless bash
subscriber() {
    # CEN_OPT_HOST is not quoted to allow extra parameters ...
    exec mosquitto_sub -h $CEN_OPT_HOST -F "%t %p" "${DAT_MQTOPICS[@]}"
}

# helper for parsing: <expr> <data> [<mext>]|- [<merr>]|- <vnam>...
___regexp() {
    if [[ "$2" =~ $1 ]] ; then
        [ "$2" != "$BASH_REMATCH" ] && [ "${3:--}" != '-' ] &&
            trace -a -c 'json parser' -- "$3" "'${2/$BASH_REMATCH/ ... }'"
        [ $# -le 4 ] && return 0
        shift 4 ; local indx=1
        while [ $# != 0 ] ; do
            [ "${1:--}" = '-' ] || printf -v "$1" '%s' "${BASH_REMATCH[indx]}"
            shift ; ((indx += 1))
        done
        return 0
    fi
    [ "${3:--}" != '-' ] && trace -a -c 'json parser' -- "$4"
    return 1
}

# simple JSON parser that understands only key/value entries
___parser() {
    # <obj>
    local jlst='[[:space:]]*\{[[:space:]]*(.*)*\}[[:space:]]*'
    # <key> <separator> <remainder>
    local jelt='[[:space:],]*\"([^\"]+)\"[[:space:]]*([:,])?[[:space:]]*(.*)'
    # <value> <quoted> <plain> <remainder>
    local jval='(\"([^\"]*)\"|([^[:space:]\"]*))[[:space:]]*(.*)'

    local dstr dkey ddel dall dquo dpln
    # step 1: isolate the object content
    ___regexp "$jlst" "$2" "Extra chars" "No JSON object" dstr || return
    trace -c 'json parser doc' -a -- "$1" "${dstr//[[:space:]]/ }"
    while : ; do
        [ -z "${dstr//[[:space:]]/}" ] && return
        # trace -a -c 'json parser' "'$dstr'"
        # step 2: get <key> [<deli>] [<rest>]
        ___regexp "$jelt" "$dstr" "Extra chars" "No key" dkey ddel dstr || return
        if [ "$ddel" = ':' ] ; then
            # step 3: get value (can be missing, quoted or a plain word)
            ___regexp "$jval" "$dstr" "Extra chars" "Error" dall dquo dpln dstr || return
            if [ "${dall:-,}" = ',' ] ; then dval='-'
            elif [ -n "$dquo" ] ; then       dval="$dquo"
            else                             dval="$dpln"
            fi
            trace -a -p -c 'json parser' "key %-15s  value %s" "'$dkey'" "'$dval'"
            DAT_DICTDATA["$1/$dkey"]="$dval"
        else
            trace -a -c 'json parser' "expected colon:" "$dkey"
        fi
    done
}

# saving payload data to a file runs in a sub-shell (not calling quit)
serializer() {
    local mesg mtag last
    # shellcheck disable=SC2162     # escaping \ is intended
    while read mesg ; do
        # get topic and a JSON document
        #trace -a -c 'serializer read' -- "$mesg"
        # shellcheck disable=SC1083
        case "${mesg// /}" in
            */*{*}) mtag="${mesg%% *}" ; json="${mesg#*\{}{" ;;
            */*{*)  mtag="${mesg%% *}" ; json="${mesg#*\{}{" ; continue ;;
            *})     json+=" $mesg" ;;
            *)      [ -n "$mtag" ] && json+=" $mesg" ; continue ;;
        esac
        [ -z "$mtag" -o -z "$json" ] && continue

        # parse JSON into dictionary and serialize it to file
        ___parser "$mtag" "$json"
                                                            # shellcheck disable=SC2124
        mesg="${DAT_DICTDATA[@]@A}" ; mesg="${mesg#* -A }"
        if [ "$last" = "$mesg" ] ; then
            trace -a -c 'serializer info' "Data not changed"
        else
            last="$mesg"
            trace -a -c 'serializer write' "${#DAT_DICTDATA[@]} items"
            echo "$mesg" >"$DAT_MQTTDATA"
        fi
        mtag=                                               # wait for next topic/doc
    done <"$DAT_MQTTPIPE"
    exit 1                                                  # must not call quit
}

# this version has a cripled parser but may help understanding the logic
#serializer() {
#    local mesg mtag last
#    while read mesg ; do
#        trace -c 'serializer' -a -- "$mesg"
#        case "$mesg" in
#            */*{)   mtag="${mesg%% *}" ;;
#            *})     mtag=
#                    mesg="${DAT_DICTDATA[@]@A}" ; mesg="${mesg#* -A }"
#                    if [ "$last" = "$mesg" ] ; then
#                        trace -a -c 'serializer' "Data not changed"
#                    else
#                        last="$mesg"
#                        trace -a -c 'serializer' "${mesg#*=}"
#                        echo "$mesg" >"$DAT_MQTTDATA"
#                    fi
#                    ;;
#            *)      [ -z "$mtag" ] && continue
#                    mesg="${mesg%\",}" ; mesg="${mesg/\": / }" ; mesg="${mesg//\"/}"
#                    DAT_DICTDATA["$mtag/${mesg%% *}"]="${mesg#* }"
#        esac
#    done <"$DAT_MQTTPIPE"
#    exit 1                                  # must not call quit
#}

# ------------------------------------------------------------------------------
# Display updates
# ------------------------------------------------------------------------------

DAT_UPDATE_HHMM=            # time in HHMM format
DAT_UPDATE_YYMD=            # ISO date and localized weekday
DAT_OUTPUT_HHMM=            # toilet output (arrays) ...
DAT_OUTPUT_YYMD=
DAT_OUTPUT_TEMP=
DAT_OUTPUT_CLEAR=           # clear screen escape sequence

# used by main bash instance to load data written by serializer()
# shellcheck disable=SC2317
update_data() {
    if ((DAT_COUNTER % DAT_POLLMOD)) ; then                 # run only every DAT_POLLMOD sec.
        # trace -a "Skip:" "No data check"
        return 1
    elif ! [ "$DAT_MQTTDATA" -nt "$DAT_UPDATED" ] ; then    # run only on data update
        return 1
    fi
                                                            # shellcheck disable=SC1090
    source "$DAT_MQTTDATA"
    [ "${#DAT_DICTDATA[@]}" = 0 ] && return 1
    trace -a -c 'update_data' "${#DAT_DICTDATA[@]} items"
    true >"$DAT_UPDATED"                                    # update timestamp
    return 0
}

# Clock mockup, run toilet after updates, dump to console
                                                            # shellcheck disable=SC2317
    update_clock() {
    local tnow="$EPOCHSECONDS" hhmm yymd fupd line
    # printf -v scnd '%(%S)T' "$tnow"                       # unused in this demo
    printf -v hhmm '%(%H%M)T' "$tnow"
    printf -v yymd '%(%Y-%m-%d %A)T' "$tnow"

    [ -n "$CEN_OPT_ASCII" ] && DAT_FONT='ascii' || DAT_FONT='mono'

    if [ "$hhmm" != "$DAT_UPDATE_HHMM" ] ; then
        DAT_UPDATE_HHMM="$hhmm" ; fupd=1
        system -f -a DAT_OUTPUT_HHMM -- toilet -f "big${DAT_FONT}12" -t -- \
                     "${DAT_UPDATE_HHMM::2}:${DAT_UPDATE_HHMM:2}"
    fi
    if [ "$yymd" != "$DAT_UPDATE_YYMD" ] ; then
        DAT_UPDATE_YYMD="$yymd" ; fupd=1
        system -f -a DAT_OUTPUT_YYMD -- toilet -f "sm${DAT_FONT}9" -t -- \
                     "${DAT_UPDATE_YYMD#* } ${DAT_UPDATE_YYMD% *}"
    fi
    if update_data || [ -z "$DAT_OUTPUT_TEMP" ] ; then
        local tmp1="${DAT_DICTDATA["${DAT_MQTOPICS[1]}/temperature"]}"
        local tmp2="${DAT_DICTDATA["${DAT_MQTOPICS[3]}/temperature"]}"
        printf -v line '%5s째  %5s째' "${tmp1:---.-}" "${tmp2:---.-}"
        system -f -a DAT_OUTPUT_TEMP -- toilet -f "sm${DAT_FONT}12" -t -- "$line"

    fi
    [ -z "$fupd" ] && return

    local icol="${CEN_OPT_INDENT%[!0-9]*}" irow="${CEN_OPT_INDENT#*[!0-9]}"
    printf -v icol "%${icol:-0}s"
    echo -n "$DAT_OUTPUT_CLEAR"
    while [ "${irow:-0}" -gt 0 ] ; do
        echo ; ((irow -= 1))
    done
    for line in "${DAT_OUTPUT_HHMM[@]:3:13}" ; do echo "$icol            $line" ; done
    for line in "${DAT_OUTPUT_YYMD[@]}"      ; do echo "$icol$line" ; done
    for line in "${DAT_OUTPUT_TEMP[@]:1:6}"  ; do echo "$icol   $line" ; done
                                               echo -n "$icol   ${DAT_OUTPUT_TEMP[7]}  "
}

# Montor mode, simple text messages
                                                            # shellcheck disable=SC2317
update_text() {
    local tnow="$EPOCHSECONDS" hhmm
    printf -v hhmm '%(%H%M)T' "$tnow"
    if [ "$hhmm" != "$DAT_UPDATE_HHMM" ] ; then
        DAT_UPDATE_HHMM="$hhmm"
        message "Time:" "${hhmm::2}:${hhmm:2}"
    fi
    update_data || return
    local dat1="${DAT_DICTDATA["${DAT_MQTOPICS[1]}/temperature"]}"
    local dat2="${DAT_DICTDATA["${DAT_MQTOPICS[3]}/temperature"]}"
    message -p "MQtt: Temperatures   %6s째  %6s째" "${dat1:---.-}" "${dat2:---.-}"
    dat1="${DAT_DICTDATA["${DAT_MQTOPICS[1]}/humidity"]}"
    dat2="${DAT_DICTDATA["${DAT_MQTOPICS[3]}/humidity"]}"
    [ -n "$dat1$dat2" ] &&
        message -a -p "      Humidity %12s%%  %6s%%" "${dat1:---.-}" "${dat2:---.-}"
}

# ------------------------------------------------------------------------------
# Main loop
# ------------------------------------------------------------------------------
run() {
    local item updt='update_text'
    message "Starting up..."

    # check pre requisites
    system -c -f mosquitto_sub
    if [ -n "$CEN_OPT_CLOCK" ] ; then
        system -c -f toilet clear
        system -f -s DAT_OUTPUT_CLEAR -- clear
        updt='update_clock'
    fi

    for item in 1 2 3 15 ; do
        trap 'echo ; quit "Terminating..."' "$item"
    done

    # launch MQtt subscriber using a pipe for payload data
    tmpfile -r -n -s DAT_MQTTPIPE || quit
    system -e -p -- mkfifo "$DAT_MQTTPIPE" ; error -q
    subscriber >"$DAT_MQTTPIPE" & DAT_SUBSCRIBER=$!

    # start the serializer sub shell
    tmpfile -r -s DAT_UPDATED || quit
    tmpfile -r -s DAT_MQTTDATA || quit
    serializer & DAT_SERIALIZER=$!

    # try to enable 'sleep' as builtin (see apt install bash-builtins)
    enable sleep &>/dev/null

    if [ $# != 0 ] ; then
        DAT_MQTOPICS=()
        for item in "$@" ; do
            DAT_MQTOPICS+=('-t' "$item")
        done
    fi

    # check if sub-shells are alive
    trace -a -p "PIDs  subscriber=%s  serializer=%s" "$DAT_SUBSCRIBER" "$DAT_SERIALIZER"
    sleep 3                      # give them time to initialize
    kill -0 "$DAT_SUBSCRIBER" &>/dev/null || quit -e "Subscriber process died"
    kill -0 "$DAT_SERIALIZER" &>/dev/null || quit -e "Serializer process died"
    error -q

    message "Running (use ^C to stop)..."
    while : ; do
        ((DAT_COUNTER += 1))
        sleep 1 ; $updt                 # call update_text or update_clock
    done
}

# ------------------------------------------------------------------------------
# Custom options
# ------------------------------------------------------------------------------
                                                    # shellcheck disable=SC2317
options() {
    case "$1" in
    -A|--asc*)      optarg 'ascii'  -   -f ;;       # flag
    -C|--clo*)      optarg 'clock'  -   -f ;;       # flag
    -H|--hos*)      optarg 'host'   -   -t ;;       # text option
    -I|--ind*)      optarg 'indent' -   -t ;;       # text option
    esac
}

# ------------------------------------------------------------------------------
# Help implementation
# ------------------------------------------------------------------------------
usage() {
    create -c <<!EOF
Usage:     $CEN_NAME [-d|-h] [-v|-q]
                     [-A] [-C] [-H <host>] [-I <idnt> [---] <topic>...

           $CEN_TITLE.  With
           option '--clock' it displays time, date and two temperatures
           The later is a mockup and test for 'centauriclock'.

Options:   -d --dryrun          show what would be done, make no changes
           -h --help            show this text
           -q --quiet           report errors only
           -v --verbose         be verbose

           -A --ascii           use pure ASCII (for console screen font)
           -C --clock           clock mockup, inside/outside temperature
           -H --host    <host>  MQtt host name (+ options if needed)
           -I --indent  <idnt>  indent clock by columns/rows

Arguments: <host>               mosquitto_sub arguments, see example
           <idnx>               <cols>.<rows>, see example
           <topic>              topics to subscribe to. Should contain a
                                'temperature' field in payload. All other
                                fields ignored. Must be in JSON format.

Examples:   # use -H to pass <host> and options to mosquitto_sub
            $CEN_NAME -v -H 'raspi1.at.home -p 1883 -u otto'
            $CEN_NAME -H 'raspi1'

            # the default options/arguments are:
            $CEN_NAME -H 'localhost' weewx/inside weewx/outside

            # run in clock mode:
            $CEN_NAME -q -H 'raspi1' -C
            $CEN_NAME -C -A -I 40.12

            # it may take a while until MQtt data gets updated and shown

!EOF
}

# ------------------------------------------------------------------------------
# mini-bash-lib         implementation
# ------------------------------------------------------------------------------
# shellcheck disable=SC2317
{
# shellcheck disable=SC2034
{
    CEN_EXIT=0              # exit code
    CEN_HOOK_QUIT=          # called by quit()
    CEN_IDNT=               # Flag for indentation
    CEN_MINI_VERSION='0.01'

    CEN_ARGS=               # option arg count  (0:=error  1:=flag only  2:has value)
    CEN_ARGOPT=             # potential option argument
    CEN_ACTARR=             # next cmd line argument
    CEN_CONFIRM=            # returned by confirm()
    CEN_OPT_DRYRUN=         # option -d
    CEN_OPT_FORCE=          # option -f

    CEN_TMP_BASE="${TMPDIR:-/tmp}/$EPOCHSECONDS-$BASHPID-"
    CEN_TMP_INDX=0
    CEN_TMP_SYSO=           # temp file for system()
    CEN_TMPFILE=            # see tmpfile()

    CEN_VERB=1              # option -v  (0:=error only  1:=normal  2:=trace)
    CEN_YESNO=              # option -n|-y
}

# some CEN_xxx variables are set in the proxy

# ------------------------------------------------------------------------------
# all output functions are implemented via message()
# ------------------------------------------------------------------------------

warning() { message -w "$@" ; }
error()   { message -e -l "$@" ; return "$CEN_EXIT" ; }
fatal()   { message -f -l "$@" ; }
trace()   { [ "$CEN_VERB" -lt 2 ] && return 0 ; message "$@" ; }

# write a message stderr: [-a|-i] [-m] [-p] [--] <text>...
message() {
    local _idnt="$CEN_NAME:" _exit _mesg _olog="$CEN_VERB" _opre _oqui _omul _opri
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        -)    break ;;
        --)   shift ; break ;;
        -a)   [ -n "$CEN_IDNT" ] && _idnt="${_idnt//?/ }" ;;
        -c)   # printf formatting is not unicode aware ...
              local _asci _ugly
              _asci="${2//[[:alpha:]]/.}"               # this is unicode aware
              printf -v _ugly "%-18s:" "$_asci"         # get correct padding
              printf -v _opre '%s' "${_ugly/$_asci/$2}" # back to unicode
              shift ;;
        -e)   _opre=$"***ERROR***" ; _exit=2 ;;
        -f)   _opre=$"***FATAL ERROR***" ; _oqui=1 ; _exit=3 ;;
        -i)   _idnt="${_idnt//?/ }" ;;
        -l)   _olog=1 ;;
        -m)   _omul=1 ;;
        -p)   _opri=1 ;;
        -q)   [ "$CEN_EXIT" = 0 ] && return 0 ; _oqui=2 ;;
        -t)   [ "$CEN_EXIT" = 0 ] ; return ;;
        -w)   _opre=$"***WARNING***" ;;
        esac ; shift
    done
    [ -n "$_exit" ] && { _olog=1 ; CEN_EXIT="$_exit" ; }
    [ "$_oqui" = 2 ] && quit -e "$@"
    [ "$_olog" -lt 1 ] && return 0
    if [ -n "$_omul" ] ; then
        _omul="$1" ; shift
        # shellcheck disable=SC2145
        set -- "$_omul${@/*/$'\n'${_idnt//?/ } &}"
    fi
    # shellcheck disable=SC2059
    [ -z "$_opri" ] && _mesg="$*" || printf -v _mesg "$@"
    [ -n "$_opre" ] && _mesg="$_opre $_mesg"
    echo "$_idnt" "$_mesg" >&2
    CEN_IDNT=1 ; [ -n "$_oqui" ] && quit
}

# ------------------------------------------------------------------------------
# various functions
# ------------------------------------------------------------------------------

# get input: [-a|-i] [-d <dflt>] [-f] [-p -|<info>] [-s <vnam>] [-u] [-y|-n] <text>...
confirm() {
    local _ofmt _oupc _what=1 _repl _vnam='CEN_CONFIRM' _idnt="$CEN_NAME:" _info _defn _text
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -a) [ -n "$CEN_IDNT" ] && _idnt="${_idnt//?/ }" ;;
        -d) shift ; _defn="$1" ;;
        -f) _ofmt=1 ;;
        -i) _idnt="${_idnt//?/ }" ;;
        -n) _what=1 ;;
        -p) shift ; _what= ; _info="$1" ;;
        -s) shift ; _vnam="$1" ;;
        -u) _oupc=1 ;;
        -y) _what=0
        esac ; shift
    done
    # shellcheck disable=SC2059
    [ -z "$_ofmt" ] && _text="$*" || printf -v _text "$@"

    # just read text and return it
    if [ -z "$_what" ] ; then
        [ "$_info" = '-' ] && _info=': '
        read -p -r "$_idnt $_text$_info" _repl ; CEN_IDNT=1
        [ -z "$_repl" ] && _repl="$_defn"
        [ -z "$_oupc" ] && _repl="${_repl,,}"
        [ -n "$_vnam" ] && printf -v "$_vnam" '%s' "$_repl"
        [ -n "$_repl" ] ; return            # return status
    fi

    # ask a yes/no question
    local _locy _locn _loqy _loqn _loca=$"yes째no째 [Y/n]? 째 [y/N]? "
    IFS='째' read -r _locy _locn _loqy _loqn <<<"$_loca"
    if [ -z "$CEN_YESNO" ] ; then
        if [ "$_what" = 0 ] ; then          # yes
            _defn="$_locy" ; _info="$_loqy"
        else                                # no
            _defn="$_locn" ; _info="$_loqn"
        fi
        while : ; do
            read -rp "$_idnt $_text$_info" _repl ; CEN_IDNT=1
            _repl="${_repl,,}"
            case "${_repl::1}" in
            '')             _repl="$_defn" ; break ;;
            "${_locn::1}")  _repl="$_locn" ; break ;;
            "${_locy::1}")  _repl="$_locy" ; break
            esac
            message -l $"Please enter 'yes' or 'no'"
        done
    else
        [ "$CEN_YESNO" = 'y' ] && _repl="$_locy" || _repl="$_locn"
    fi
    [ -n "$_vnam" ] && printf -v "$_vnam" '%s' "$_repl"
    [ "$_repl" = "$_locy" ]                 # return status
}

# file output: create [-r] [-t] [-c] [-v <vnam>] [--] <path>|-
create() {
    local _rdry _rtru _vnam _fout _darr
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -c)   _vnam='-' ;;
        -r)   _rdry='-r' ;;
        -t)   _rtru=1 ;;
        -v)   shift ; _vnam="$1"
        esac ; shift
    done
    dryrun $_rdry 'create' "$@" && return 1
    [ "${1:--}" = '-' ] && _fout='/dev/stdout' || _fout="$1"
    if [ "${_fout::5}" != '/dev/' ] && [ -e "$_fout" ] ; then
       if [ -z "$_rtru" ] ; then
           error $"Existing file:" "$_fout" ; return 1
       elif ! [ -f "$_fout" -a -w "$_fout" ] ; then
           remove $_rdry -- "$_fout" || return 1
       fi
    fi
    _cen_create_file "$_fout" || return 1
    [ -z "$_vnam" ] && return 0
    if [ "$_vnam" = '-' ] ; then
        local _darr ; readarray -t _darr
    else
        local -n _darr="$_vnam"
    fi
    printf '%s\n' "${_darr[@]}" >"$_fout"
}

_cen_create_file() {
    true >"$1" 2>/dev/null && return 0 ; error $"Failed to create file:" "$1"
}

# check --dryrun option: [-r] [<mesg>...]
dryrun() {
    local _rdry="$CEN_OPT_DRYRUN"
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -r)   _rdry= ;;
        esac ; shift
    done

    if [ -z "$_rdry" ] ; then
        trace -a -c $"Execute" "$@" ; return 1
    fi
    message -a -c $"Skip" "$@" ; return 0
}

# run another tool using --embed: -m <fake> -a|-s <vnam> <system-opts> <tool> [--] <arg>...
embed() {
    local _opts=('--embed' "$CEN_NAME")
    [ -n "$CEN_OPT_DRYRUN" ] && _opts+=('--dryrun')
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -m)   return 0 ;;                       # mini-bash-lib has no modules
        -a|-s)  _opts+=("$1" "$2") ; shift ;;
        *)    _opts+=("$1")
        esac ; shift
    done
    local _prog="$1" _stat ; shift
    system -r "$_prog" "${_opts[@]}" -- "$@" ; _stat="$?"
    [ "$_stat" = 3 ] && quit -s 3 ; return "$_stat"
}

# create dir, set current dir: [-f|-q] [-m] [-c|-p] [--] <path>
folder() {
    local _ochg _omak _oerr='error'
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -c) _ochg='cd' ;;
        -f) _oerr='fatal' ;;
        -m) _omak=1 ;;
        -p) _ochg='cd -P' ;;
        -q) _oerr=':' ;;
        esac ; shift
    done
    if [ ! -d "$1" ] ; then
        if [ -n "$_omak" ] ; then
            system -e -p -- mkdir -p "$1" || return 1
        else
            $_oerr $"Is not a folder:" "$1" || return 1
        fi
    fi
    [ -z "$_ochg" ] && return 0
    # using 'system eval cd ..' to simplify error handling
    system -r -e -- eval "$_ochg" "$1" || return 1
    trace -a -c $"Current folder" "$PWD" ; return 0
}

# handle word split or join: -j|-s <vnam>  [--] <data>...
# shellcheck disable=SC2206
# shellcheck disable=SC2059
splitjoin() {
    local _sopt _deli
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --) shift ; break ;;
        -d) shift ; printf -v _deli "$1" ;;
        -s) shift ; local -n _vjsx="$1" ; _sopt=1 ;;
        -j) shift ; local -n _vjsx="$1" ; _sopt=2 ;;
        esac ; shift
    done
    case "$_sopt" in
    1)  [ -z "$_deli" ] && _deli=$'\t\n'
        local _sifs="$IFS"
        set -f ; IFS="$_deli" _vjsx=($*) ; set +f ; IFS="$_sifs" ;;
    2)  [ -z "$_deli" ] && _deli=$'\t'
        printf -v _vjsx "${_deli::1}%s" "$@" ; _vjsx="${_vjsx:1}" ;;
    *)  return 1
    esac ; return 0
}

# some simple file-system commands:
#   copy    [-f|-q] [-r] [-a] [-u] [--] <arg>...
#   rename  [-f|-q] [-r]           [--] <arg>...
#   remove  [-f|-q] [-r] [-d] [-o] [--] <arg>...
#   symlink [-f|-q] [-r] [-n] [-r] [--] <arg>...

copy() { _cen_simple_cmd 'cp' "$@" ; }        # -a -u
rename() { _cen_simple_cmd 'mv' "$@" ; }
remove() { _cen_simple_cmd 'rm' "$@" ; }      # -d -o
symlink() { _cen_simple_cmd 'ln -s' "$@" ; }  # -n -r

_cen_simple_cmd() {
    local _oerr='-e -p' _orun _args=("$1") ; shift
    while [ "${1::1}" = '-' ] ; do
        case "$1${_args::1}" in
        --?)    shift ; break ;;
        -ac)    _args+=('-a') ;;        # cp -a
        -uc)    _args+=('-u') ;;        # cp -u
        -dr)    _args+=('-r') ;;        # rm -r
        -or)    _args+=('--one-file-system') ;;
        -nl)    _args+=('-f' '-s') ;;   # ln -f
        -rl)    _args+=('-r') ;;        # ln -r (shadows dryrun -r)
        -f?)    _oerr='-f -p' ;;
        -q?)    _oerr='-q' ;;
        -r?)    _orun=1 ;;
        esac ; shift
    done
    # shellcheck disable=SC2086
    system $_oerr $_orun -- "${_args[@]}" "$@"
}

# run a command: <opt>... [--] <cmd> <arg>...
system() {
    local _stat _mesg=':' _rdry _fchk _onam _ored _otyp
    # _ored (output redir)  '': none  0: /dev/null   1: stdout+err  2: stderr only
    # _otyp (output dest)   '': none  0: error only  1: to string   2: to array
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        --)   shift ; break ;;
        -a)   shift ; _onam="$1" ; _ored=1 ; _otyp=2 ;;
        -c)   _fchk=1 ;;
        -e)   _mesg='error' ;;
        -f)   _mesg='fatal' ;;
        -p)   _ored=1 ; [ -z "$_otyp" ] && _otyp=0 ;;
        -q)   _ored=0 ;;
        -r)   _rdry='-r' ;;
        -s)   shift ; _onam="$1" ; _ored=1 ; _otyp=1 ;;
        -t)   [ "$CEN_EXIT" = 0 ] || return 1 ;;
        -w)   _mesg='warning' ;;
        -z)   _ored=2 ; [ -z "$_otyp" ] && _otyp=0 ;;
        esac ; shift
    done
    if [ -n "$_fchk" ] ; then
        _stat=0
        for _fchk in "$@" ; do
            type -t "$_fchk" &>/dev/null && continue
            $_mesg -- $"Command not found:" "$_fchk" ; _stat=127
        done
        return "$_stat"
    fi
    dryrun $_rdry "$@" && return 1

    [ -n "$_otyp" -a -z "$CEN_TMP_SYSO" ] && tmpfile -r -s CEN_TMP_SYSO
    case "$_ored" in
    0)  "$@" &>/dev/null ; return ;;                    # return status
    1)  "$@" &>"$CEN_TMP_SYSO" ; _stat=$? ;;
    2)  "$@" 2>"$CEN_TMP_SYSO" ; _stat=$? ;;
    *)  "$@" ; _stat=$?
    esac
    [ "$_stat" = 0 -a -z "$_onam" ] && return 0         # output ignored

    # shellcheck disable=SC2015
    [ "$_otyp" = 2 ] && local -n _vsys="$_onam" || local _vsys
    readarray -t _vsys <"$CEN_TMP_SYSO"
    [ "$_otyp" = 1 ] && splitjoin -j "$_onam" -- "${_vsys[@]}"
    [ "$_stat" = 0 ] && return 0

    $_mesg -p $"Execution of '%s' failed (status %s)" "$1" "$_stat"
    [ "${_ored:-0}" != 0 ] && message -i -m "${_vsys[@]}"
    return "$_stat"
}

# create transient file: [-r] [-s <vnam>]
tmpfile() {
    local _vtmp='CEN_TEMPFILE' _rdry _crea=1
    local _temp="$CEN_TMP_BASE$CEN_TMP_INDX-$BASHPID"
    ((CEN_TMP_INDX += 1))
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        -n)   _crea= ;;
        -r)   _rdry='-r' ;;
        -s)   shift ; _vtmp="$1" ;;
        esac ; shift
    done
    printf -v "$_vtmp" '%s' "$_temp"
    [ -z "$_crea" ] && return 0
    dryrun $_rdry $"Temporary file" "$_temp" && return 1
    _cen_create_file "$_temp"                           # return status
 }

# ------------------------------------------------------------------------------
# main and quit
# ------------------------------------------------------------------------------
# shellcheck disable=SC2034
main() {
    # set app name and feature defaults if not yet set (by proxy)
    if [ "${CEN_NAME:--}" = '-' ] ;then
         CEN_NAME="${BASH_ARGV0##*/}"
         CEN_FEATURE_F=1 ; CEN_FEATURE_Y=1
    fi
    # minimalistic option parsing ('---' or '--' stop the parser)
    local _opts=':' ; PATH=' ' type -t 'options' &>/dev/null && _opts='options'
    while [ "${1::1}" = '-' ] ; do
        CEN_ARGS= ; CEN_ARGOPT= ; CEN_ACTION="$1" ; CEN_ACTARR="$2"
        case "$1" in
            --*=*)       CEN_ARGOPT="${1#*=}" ; CEN_ACTION="${1%%=*}" ;;
            -[^-]*)      CEN_ARGOPT="${1:2}"  ; CEN_ACTION="${1::2}" ;;
            --|---)      shift ; break ;;
        esac
        $_opts "$CEN_ACTION" "${CEN_ARGOPT:-$2}"
        [ -z "$CEN_ARGS" ] && CEN_ARGS=1 && case "$CEN_ACTION" in
            -d|--dry*)   CEN_OPT_DRYRUN=1 ;;
            -f|--for*)   [ -n "$CEN_FEATURE_F" ] && CEN_OPT_FORCE=1 || CEN_ARGS=0 ;;
            -h|--help)   PATH=' ' type -t usage &>/dev/null && { usage >&2 ; quit -s 2 ; }
                         quit $"Option '--help' is not implemented" ;;
            -n|--no)     [ -n "$CEN_FEATURE_Y" ] && CEN_YESNO='n' || CEN_ARGS=0 ;;
            -q|--qui*)   CEN_VERB=0 ;;
            -v|--ver*)   CEN_VERB=2 ;;
            -y|--yes)    [ -n "$CEN_FEATURE_Y" ] && CEN_YESNO='y' || CEN_ARGS=0 ;;
            --embed)     optarg - CEN_NAME -t ;;
            --info)      quit -p "mini-bash-lib $CEN_MINI_VERSION; '%s'; %s" "$CEN_VERSION" \
                                 "${CEN_LEGAL:-$"<unknown Author/Licence>"}" ;;
            --mini*)     ;;
            --trace)     set -x ;;
            *)           CEN_ARGS=
        esac
        [ "${CEN_ARGS:-0}" -lt 1 ] && quit -e $"Unknown option:" "$1"
        [ "$CEN_ARGS" -gt $# ] && CEN_ARGS="$#" ; shift "$CEN_ARGS"
    done
    CEN_ACTARR= ; CEN_ARGOPT= ; CEN_ACTION= ; $_opts    # end of option parsing
    PATH=' ' type -t run &>/dev/null || return 2 ; run "$@"
}

# get option setting: <name> <vnam>|- [-t|-f] [<value>]
optarg() {
    local _name="${2:--}" ; [ "$_name" = '-' ] && _name="CEN_OPT_${1^^}"
    case "${3:--f}" in
    -f) printf -v "$_name" '%s' "${4:-1}" ; CEN_ARGS=1 ;;
    *)  if [ -z "$CEN_ARGOPT" ] ; then
            [ "$CEN_ACTARR" != '-' -a "${CEN_ACTARR::1}" = '-' ] &&
                quit -e "Missing option value:" "--$1"
            CEN_ARGS=2 ; CEN_ARGOPT="$CEN_ACTARR"
        else
            CEN_ARGS=1
        fi
        [ "$CEN_ARGOPT" = '-' ] && CEN_ARGOPT="${4:--}" ; printf -v "$_name" '%s' "$CEN_ARGOPT"
    esac
}

# terminate script: [-a|-i] [-p] [-s <code>] [-e|-t|-u] [--] <text>...
quit() {
    local _opts=() _term
    while [ "${1::1}" = '-' ] ; do
        case "$1" in
        -)  break ;;
        --) shift ; break ;;
        -s) shift ; CEN_EXIT="$1" ;;
        -e) _term=$"Terminated after error" ; CEN_EXIT=1 ; _opts+=('-e') ;;
        -t|-u) _term=$"Terminated" ; CEN_EXIT=4 ;;
        *)  _opts+=("$1") ;;
        esac ; shift
    done

    type -t "$CEN_HOOK_QUIT" &>/dev/null && "$CEN_HOOK_QUIT" "$@"
    if [ -n "$_term" ] ; then
        if [ $# = 0 ] ;       then set -- "$_term"
        elif [ "$*" = '-' ] ; then set --
        elif [ "$1" = '-' ] ; then set -- "$_term""${2:+:}" "${@:2}"
        fi
    fi
    [ -n "$*" ] && message "${_opts[@]}" "$@"
    [ "$CEN_TMP_INDX" != 0 -a -n "$CEN_TMP_BASE" ] && system -q -r -- rm -f "$CEN_TMP_BASE"*
    trace -a "quit STATUS=$CEN_EXIT" ; exit "$CEN_EXIT"
}

# ------------------------------------------------------------------------------
# command not found runs in a sub-shell, must call quit() indirectly via signal
# ------------------------------------------------------------------------------
command_not_found_handle() {
    message -l $"***ABORT***" $"Command not found:" "$1"
    set +xeE ; kill -42 $$              # send signal to main shell
}

# shellcheck disable=SC2172
trap 'trap 42; quit -s 127' 42          # quit from main shell
}

# Call run() after option parsing
main "$@" ; quit

# End
