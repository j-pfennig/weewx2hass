#!/usr/bin/bash
CEN_LEGAL="Copyright Dr. J. Pfennig (c) 2024-2025; BSD License"
CEN_TITLE="Foreward Temperature Data from WeeWX to Home Assistant via MQtt"

# use proxy to load mini-bash-lib or centauri-bash-lib (if installed)
PATH+=":${0%/*}" . _mini_bash_lib - '0.10' || exit 2

# declare global variables ...

DAT_SQLITE='/var/lib/weewx/weewx.sdb'
DAT_BROKER=('-h' 'localhost')

DAT_SLEEP=120                       # sleep time between polls
DAT_ALIVE=5                         # update MQtt at least every <n> polls
DAT_COUNTER=1                       # data base poll counter

declare -A DAT_MQTTDICT             # used to suppress extra mqtt pub calls

# ------------------------------------------------------------------------------
# Payload
# ------------------------------------------------------------------------------

# get sql data: <file> <table> <fields>
lastRecord() {
    local ssql
    system -r -s ssql -e -- sqlite3 "$2" "SELECT $4 FROM $3 WHERE ROWID=(SELECT max(ROWID) FROM $3);"
    # shellcheck disable=SC2181
    [ $? = 0 ] || ssql=
    splitjoin -d '|' -s "$1" -- "$ssql"
    [ -n "$ssql" ]                              # return status
}

# create a JSON data record: <vnam> [<key> <value>]...
makeJSON() {
    local _vnam="$1" _jitm _jsep _jdat _jval ; shift
    while [ "$#" -gt 0 ] ; do
        _jval="${2%[[::space::]]*}"             # remove trailing whitespace
        [ "$#" -gt 2 ] && _jsep=',' || _jsep=
        printf -v _jitm '"%s": "%s"%s\n' "$1" "$_jval" "$_jsep" 
        _jdat+="$_jitm" ; shift ; shift
    done
    printf -v "$_vnam" '{\n%s}\n' "$_jdat"
}

# fixed point F to CÂ° conversion: <vnam> <data>
convF2C() {
    local _fnum="${2%%.*}" _ffra="${2#*.}"
    [ "$_fnum" = "$_ffra" ] && _ffra='0' || _ffra="${_ffra::1}"
    # rounding is ceil(), might do better emulating round()
    _fnum="$(((_fnum * 100 + _ffra * 10 - 3195) / 18 ))"
    _fnum="${_fnum::-1}.${_fnum: -1}"           # one decimal place only
    case "$_fnum" in                            # make sure to have leading 0
        .*)     _fnum='0'"$_fnum" ;;
        -.*)    _fnum="${_fnum/-./-0.}"
    esac
    printf -v "$1" '%s' "$_fnum"
}

# send data to broker, do not repeat equal data
sendMQTT() {
    local topi="$1" ; shift
    local payl="$1" ; shift

    if [ $((DAT_COUNTER % DAT_ALIVE)) = 0 ] ; then      # always send
        :
    elif [ "${DAT_MQTTDICT["$topi"]}" = "$payl" ] ; then
       trace -a -p "mqtt '%s' repeated, do not publish" "$topi"
       return 0
    fi

    message -a -p "mqtt %-20s update (%(%Y-%m-%d %H:%M)T)" "'$topi'" -1
    DAT_MQTTDICT["$topi"]="$payl"
    # shellcheck disable=SC2145
    dryrun "mosquitto_pub $@ -t $topi -m ${payl//[[:cntrl:]]/ }" ||
        system -e -- mosquitto_pub "$@" -t "$topi" -m "$payl"
}

# main loop, running until killed from outside
run() {
    local asql tmpi tmpo humi humo json
    while : ; do
                                            # fetch db record
        if lastRecord asql "$DAT_SQLITE" 'archive' \
                                         'inTemp, inHumidity, outTemp, outHumidity' ; then 
            trace "Data:" "${asql[@]}"
                                            # inside data
            convF2C tmpi "${asql[0]}" ; humi="${asql[1]}" 
            makeJSON json 'temperature' "$tmpi" 'humidity' "$humi"
            sendMQTT 'weewx/inside' "$json" "${DAT_BROKER[@]}"
                                            # outside data
            convF2C tmpo "${asql[2]}" ; humo="${asql[3]}"
            makeJSON json 'temperature' "$tmpo" 'humidity' "$humo"
            sendMQTT 'weewx/outside' "$json" "${DAT_BROKER[@]}"
        fi

        ((DAT_COUNTER += 1))                # used in sendMQTT to force send
        trace -a -p "Sleeping %s [s]" "$DAT_SLEEP"
        sleep "$DAT_SLEEP"
    done
}

# ------------------------------------------------------------------------------
# Usage info
# ------------------------------------------------------------------------------
usage() {
    create -c <<!EOF
Usage:     $CEN_NAME [-d] [-q|-v] [-h]

           $CEN_TITLE.

           This is a simplified version of 'weewx2hass'. The configuration is
           hard-coded in the script and only temperature data gets forewarded.

Options:   -d --dryrun          show what would be done, make no changes
           -h --help            show this text
           -q --quiet           report errors only
           -v --verbose         be verbose (use twice for debug)

Arguments: -none-               no arguments expected

!EOF
}

# ------------------------------------------------------------------------------
# Pass control to app framework
# ------------------------------------------------------------------------------
main "$@" ; quit

# End
